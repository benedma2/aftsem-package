// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_f_epsilon
double compute_f_epsilon(const arma::vec& beta, const arma::vec& y, const arma::mat& Z, const arma::vec& delta, double epsilon);
RcppExport SEXP _aftsem_compute_f_epsilon(SEXP betaSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP deltaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_f_epsilon(beta, y, Z, delta, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// compute_f_epsilon_grad
arma::vec compute_f_epsilon_grad(const arma::vec& beta, const arma::vec& y, const arma::mat& Z, const arma::vec& delta, double epsilon);
RcppExport SEXP _aftsem_compute_f_epsilon_grad(SEXP betaSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP deltaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_f_epsilon_grad(beta, y, Z, delta, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// compute_heller
/*  * Hellers estimating function with standard normal distribution function  */ double compute_heller(const arma::vec& beta, const arma::vec& y, const arma::mat& Z, const arma::vec& delta, double a);
RcppExport SEXP _aftsem_compute_heller(SEXP betaSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP deltaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_heller(beta, y, Z, delta, a));
    return rcpp_result_gen;
END_RCPP
}
// compute_heller_grad
/*  * Hellers gradient  */ arma::vec compute_heller_grad(const arma::vec& beta, const arma::vec& y, const arma::mat& Z, const arma::vec& delta, double a);
RcppExport SEXP _aftsem_compute_heller_grad(SEXP betaSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP deltaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_heller_grad(beta, y, Z, delta, a));
    return rcpp_result_gen;
END_RCPP
}
// compute_covariance
arma::mat compute_covariance(const arma::vec& delta, const arma::mat& Z, const arma::vec& e, const double& a);
RcppExport SEXP _aftsem_compute_covariance(SEXP deltaSEXP, SEXP ZSEXP, SEXP eSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_covariance(delta, Z, e, a));
    return rcpp_result_gen;
END_RCPP
}
// estimate_buckley
Rcpp::List estimate_buckley(const arma::vec& y, const arma::mat& Z, const arma::vec& delta, const arma::vec& beta0, const double epsilon, const int max_iters);
RcppExport SEXP _aftsem_estimate_buckley(SEXP ySEXP, SEXP ZSEXP, SEXP deltaSEXP, SEXP beta0SEXP, SEXP epsilonSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_buckley(y, Z, delta, beta0, epsilon, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// estimate_jin
Rcpp::List estimate_jin(const arma::vec& y, const arma::mat& Z, const arma::vec& delta, const arma::vec& beta0, const double epsilon, const int max_iters, const arma::mat& Resample_mat, arma::mat& Beta_star, bool sampling_used);
RcppExport SEXP _aftsem_estimate_jin(SEXP ySEXP, SEXP ZSEXP, SEXP deltaSEXP, SEXP beta0SEXP, SEXP epsilonSEXP, SEXP max_itersSEXP, SEXP Resample_matSEXP, SEXP Beta_starSEXP, SEXP sampling_usedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Resample_mat(Resample_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Beta_star(Beta_starSEXP);
    Rcpp::traits::input_parameter< bool >::type sampling_used(sampling_usedSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_jin(y, Z, delta, beta0, epsilon, max_iters, Resample_mat, Beta_star, sampling_used));
    return rcpp_result_gen;
END_RCPP
}
// km_e
arma::vec km_e(const arma::vec& e, const arma::vec& delta, const arma::vec& weights);
RcppExport SEXP _aftsem_km_e(SEXP eSEXP, SEXP deltaSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(km_e(e, delta, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aftsem_compute_f_epsilon", (DL_FUNC) &_aftsem_compute_f_epsilon, 5},
    {"_aftsem_compute_f_epsilon_grad", (DL_FUNC) &_aftsem_compute_f_epsilon_grad, 5},
    {"_aftsem_compute_heller", (DL_FUNC) &_aftsem_compute_heller, 5},
    {"_aftsem_compute_heller_grad", (DL_FUNC) &_aftsem_compute_heller_grad, 5},
    {"_aftsem_compute_covariance", (DL_FUNC) &_aftsem_compute_covariance, 4},
    {"_aftsem_estimate_buckley", (DL_FUNC) &_aftsem_estimate_buckley, 6},
    {"_aftsem_estimate_jin", (DL_FUNC) &_aftsem_estimate_jin, 9},
    {"_aftsem_km_e", (DL_FUNC) &_aftsem_km_e, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_aftsem(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
